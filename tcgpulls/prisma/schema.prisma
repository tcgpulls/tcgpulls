generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql / sqlite / cockroachdb
  url      = env("DATABASE_URL")
}

// =========================
// Authentication
// =========================
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// =========================
// PokemonSet
// =========================
model PokemonSet {
  // Internal PK
  id String @id @default(cuid())

  // Name field (restored)
  name String

  // External TCG code, e.g. "swsh1"
  setId        String
  language     String
  releaseDate  DateTime
  printedTotal Int
  ptcgoCode    String?
  series       String
  total        Int
  updatedAt    DateTime @updatedAt
  logo         String
  symbol       String
  localLogo    String?
  localSymbol  String?

  // Parent/subset relationship
  parentSetId String?
  parentSet   PokemonSet?  @relation("Subsets", fields: [parentSetId], references: [id])
  subsets     PokemonSet[] @relation("Subsets")

  isBoosterPack Boolean @default(true)

  // Relation to PokemonCard
  PokemonCards PokemonCard[]

  // Ensure (setId, language) is unique
  @@unique([setId, language])
}

// =========================
// PokemonCard
// =========================
model PokemonCard {
  // Internal PK
  id String @id @default(cuid())

  // External card code, e.g. "swsh4-25"
  cardId String
  setId  String
  set    PokemonSet @relation(fields: [setId], references: [id])

  variant                String   @default("normal")
  name                   String
  supertype              String
  subtypes               String[]
  hp                     Int?
  types                  String[]
  evolvesFrom            String?
  flavorText             String?
  number                 String
  normalizedNumber       Int      @default(999)
  artist                 String?
  rarity                 String?
  nationalPokedexNumbers Int[]
  imagesSmall            String
  imagesLarge            String
  localImageSmall        String?
  localImageLarge        String?
  retreatCost            String[]
  convertedRetreatCost   Int?
  language               String

  abilities  PokemonCardAbility[]
  attacks    PokemonCardAttack[]
  weaknesses PokemonCardWeakness[]

  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  PokemonCardPriceHistory PokemonCardPriceHistory[]

  // No duplicates for same (cardId, language, setId, variant)
  @@unique([cardId, language, setId, variant])
}

// =========================
// PokemonCardAbility
// =========================
model PokemonCardAbility {
  id     String      @id @default(cuid())
  card   PokemonCard @relation(fields: [cardId], references: [id])
  cardId String
  name   String
  text   String
  type   String
}

// =========================
// PokemonCardAttack
// =========================
model PokemonCardAttack {
  id                  String      @id @default(cuid())
  card                PokemonCard @relation(fields: [cardId], references: [id])
  cardId              String
  name                String
  cost                String[]
  convertedEnergyCost Int
  damage              String?
  text                String?
}

// =========================
// PokemonCardWeakness
// =========================
model PokemonCardWeakness {
  id     String      @id @default(cuid())
  card   PokemonCard @relation(fields: [cardId], references: [id])
  cardId String
  type   String
  value  String
}

// =========================
// PokemonCardPriceHistory
// =========================
model PokemonCardPriceHistory {
  id             String      @id @default(cuid())
  card           PokemonCard @relation(fields: [cardId], references: [id])
  cardId         String
  fetchedAt      DateTime    @default(now())
  variant        String
  tcgplayerData  Json?
  cardmarketData Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
