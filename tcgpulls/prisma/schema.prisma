generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PokemonSet {
  id            String        @id @default(cuid())
  name          String
  language      String
  releaseDate   DateTime
  originalId    String
  printedTotal  Int
  ptcgoCode     String?
  series        String
  total         Int
  updatedAt     DateTime      @updatedAt
  logo          String // Original URL from API
  symbol        String // Original URL from API
  localLogo     String? // Local path after download
  localSymbol   String? // Local path after download
  parentSetId   String?
  parentSet     PokemonSet?   @relation("Subsets", fields: [parentSetId], references: [id])
  subsets       PokemonSet[]  @relation("Subsets")
  isBoosterPack Boolean       @default(true)
  PokemonCards  PokemonCard[]

  @@unique([originalId, language])
}

model PokemonCard {
  id         String     @id @default(cuid())
  setId      String
  set        PokemonSet @relation(fields: [setId], references: [id])
  originalId String
  variant    String     @default("normal")

  name                   String
  supertype              String
  subtypes               String[]
  hp                     Int?
  types                  String[]
  evolvesFrom            String?
  flavorText             String?
  number                 String
  artist                 String?
  rarity                 String?
  nationalPokedexNumbers Int[]
  imagesSmall            String // original URL
  imagesLarge            String // original URL
  localImageSmall        String? // local path after download
  localImageLarge        String? // local path after download
  retreatCost            String[]
  convertedRetreatCost   Int?

  abilities  PokemonCardAbility[]
  attacks    PokemonCardAttack[]
  weaknesses PokemonCardWeakness[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([setId, originalId, variant])
}

model PokemonCardAbility {
  id     String      @id @default(cuid())
  card   PokemonCard @relation(fields: [cardId], references: [id])
  cardId String
  name   String
  text   String
  type   String
}

model PokemonCardAttack {
  id                  String      @id @default(cuid())
  card                PokemonCard @relation(fields: [cardId], references: [id])
  cardId              String
  name                String
  cost                String[]
  convertedEnergyCost Int
  damage              String?
  text                String?
}

model PokemonCardWeakness {
  id     String      @id @default(cuid())
  card   PokemonCard @relation(fields: [cardId], references: [id])
  cardId String
  type   String
  value  String
}
