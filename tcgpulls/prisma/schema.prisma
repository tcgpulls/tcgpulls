generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PokemonSet {
  id                 String        @id @default(cuid())
  name               String
  setId              String
  language           String
  releaseDate        DateTime
  printedTotal       Int
  ptcgoCode          String?
  series             String
  total              Int
  updatedAt          DateTime      @updatedAt
  logo               String
  symbol             String
  localLogo          String?
  localSymbol        String?
  parentSetId        String?
  isBoosterPack      Boolean       @default(true)
  lastPriceFetchDate DateTime?
  PokemonCards       PokemonCard[]
  parentSet          PokemonSet?   @relation("Subsets", fields: [parentSetId], references: [id])
  subsets            PokemonSet[]  @relation("Subsets")

  @@unique([setId, language])
}

model PokemonCard {
  id                      String                    @id @default(cuid())
  cardId                  String
  setId                   String
  variant                 String                    @default("normal")
  name                    String
  supertype               String
  subtypes                String[]
  hp                      Int?
  types                   String[]
  evolvesFrom             String?
  flavorText              String?
  number                  String
  normalizedNumber        Int                       @default(999)
  artist                  String?
  rarity                  String?
  nationalPokedexNumbers  Int[]
  imagesSmall             String
  imagesLarge             String
  localImageSmall         String?
  localImageLarge         String?
  retreatCost             String[]
  convertedRetreatCost    Int?
  language                String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  set                     PokemonSet                @relation(fields: [setId], references: [id])
  abilities               PokemonCardAbility[]
  attacks                 PokemonCardAttack[]
  PokemonCardPriceHistory PokemonCardPriceHistory[]
  weaknesses              PokemonCardWeakness[]

  @@unique([cardId, language, setId, variant])
}

model PokemonCardAbility {
  id     String      @id @default(cuid())
  cardId String
  name   String
  text   String
  type   String
  card   PokemonCard @relation(fields: [cardId], references: [id])
}

model PokemonCardAttack {
  id                  String      @id @default(cuid())
  cardId              String
  name                String
  cost                String[]
  convertedEnergyCost Int
  damage              String?
  text                String?
  card                PokemonCard @relation(fields: [cardId], references: [id])
}

model PokemonCardWeakness {
  id     String      @id @default(cuid())
  cardId String
  type   String
  value  String
  card   PokemonCard @relation(fields: [cardId], references: [id])
}

model PokemonCardPriceHistory {
  id             String      @id @default(cuid())
  card           PokemonCard @relation(fields: [cardId], references: [id])
  cardId         String
  fetchedAt      DateTime    @default(now())
  variant        String
  tcgplayerData  Json?
  cardmarketData Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  priceDate      DateTime    @default(now())

  @@unique([cardId, variant, priceDate])
}
