import { prisma } from "@tcg/prisma";
import customLog from "tcgpulls/utils/customLog";

async function clearAllPokemonData() {
  try {
    customLog("üóëÔ∏è Starting to wipe all Pok√©mon-related data...");

    // Step 1: Delete Pok√©mon card-related data
    customLog("üîπ Deleting Pok√©mon card abilities...");
    await prisma.pokemonCardAbility.deleteMany({});
    customLog("‚úÖ Deleted all Pok√©mon card abilities.");

    customLog("üîπ Deleting Pok√©mon card attacks...");
    await prisma.pokemonCardAttack.deleteMany({});
    customLog("‚úÖ Deleted all Pok√©mon card attacks.");

    customLog("üîπ Deleting Pok√©mon card weaknesses...");
    await prisma.pokemonCardWeakness.deleteMany({});
    customLog("‚úÖ Deleted all Pok√©mon card weaknesses.");

    // Step 2: Delete Pok√©mon cards
    customLog("üîπ Deleting all Pok√©mon cards...");
    await prisma.pokemonCard.deleteMany({});
    customLog("‚úÖ Deleted all Pok√©mon cards.");

    // Step 3: Clear parent-child relationships in Pok√©mon sets
    customLog("üîπ Clearing parent-child relationships in Pok√©mon sets...");
    await prisma.pokemonSet.updateMany({
      data: { parentSetId: null },
    });
    customLog("‚úÖ Cleared all parent-child relationships.");

    // Step 4: Delete Pok√©mon sets
    customLog("üîπ Deleting all Pok√©mon sets...");
    await prisma.pokemonSet.deleteMany({});
    customLog("‚úÖ Deleted all Pok√©mon sets.");

    customLog("üéâ All Pok√©mon-related data has been successfully wiped.");
  } catch (error) {
    customLog("error", "‚ùå Error wiping Pok√©mon data:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

clearAllPokemonData().catch((error) => {
  customLog("error", "‚ùå Error in clearAllPokemonData script:", error);
  process.exit(1);
});
