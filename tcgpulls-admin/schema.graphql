# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type PokemonSet {
  id: ID!
  name: String
  logoStorageUrl: String
  symbolStorageUrl: String
  parentSet: PokemonSet
  subsets(where: PokemonSetWhereInput! = {}, orderBy: [PokemonSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonSetWhereUniqueInput): [PokemonSet!]
  subsetsCount(where: PokemonSetWhereInput! = {}): Int
  cards(where: PokemonCardWhereInput! = {}, orderBy: [PokemonCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardWhereUniqueInput): [PokemonCard!]
  cardsCount(where: PokemonCardWhereInput! = {}): Int
  isBoosterPack: Boolean
  tcgSetId: String
  language: String
  tcgSetId_language: String
  releaseDate: DateTime
  printedTotal: Int
  ptcgoCode: String
  series: String
  total: Int
  updatedAt: DateTime
  logoApiUrl: String
  symbolApiUrl: String
  lastPriceFetchDate: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PokemonSetWhereUniqueInput {
  id: ID
  tcgSetId_language: String
}

input PokemonSetWhereInput {
  AND: [PokemonSetWhereInput!]
  OR: [PokemonSetWhereInput!]
  NOT: [PokemonSetWhereInput!]
  id: IDFilter
  name: StringFilter
  logoStorageUrl: StringFilter
  symbolStorageUrl: StringFilter
  parentSet: PokemonSetWhereInput
  subsets: PokemonSetManyRelationFilter
  cards: PokemonCardManyRelationFilter
  isBoosterPack: BooleanFilter
  tcgSetId: StringFilter
  language: StringFilter
  tcgSetId_language: StringFilter
  releaseDate: DateTimeFilter
  printedTotal: IntFilter
  ptcgoCode: StringNullableFilter
  series: StringFilter
  total: IntFilter
  updatedAt: DateTimeNullableFilter
  logoApiUrl: StringFilter
  symbolApiUrl: StringFilter
  lastPriceFetchDate: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PokemonSetManyRelationFilter {
  every: PokemonSetWhereInput
  some: PokemonSetWhereInput
  none: PokemonSetWhereInput
}

input PokemonCardManyRelationFilter {
  every: PokemonCardWhereInput
  some: PokemonCardWhereInput
  none: PokemonCardWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PokemonSetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  logoStorageUrl: OrderDirection
  symbolStorageUrl: OrderDirection
  isBoosterPack: OrderDirection
  tcgSetId: OrderDirection
  language: OrderDirection
  tcgSetId_language: OrderDirection
  releaseDate: OrderDirection
  printedTotal: OrderDirection
  ptcgoCode: OrderDirection
  series: OrderDirection
  total: OrderDirection
  updatedAt: OrderDirection
  logoApiUrl: OrderDirection
  symbolApiUrl: OrderDirection
  lastPriceFetchDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PokemonSetUpdateInput {
  name: String
  logoStorageUrl: String
  symbolStorageUrl: String
  parentSet: PokemonSetRelateToOneForUpdateInput
  subsets: PokemonSetRelateToManyForUpdateInput
  cards: PokemonCardRelateToManyForUpdateInput
  isBoosterPack: Boolean
  tcgSetId: String
  language: String
  tcgSetId_language: String
  releaseDate: DateTime
  printedTotal: Int
  ptcgoCode: String
  series: String
  total: Int
  updatedAt: DateTime
  logoApiUrl: String
  symbolApiUrl: String
  lastPriceFetchDate: DateTime
}

input PokemonSetRelateToOneForUpdateInput {
  create: PokemonSetCreateInput
  connect: PokemonSetWhereUniqueInput
  disconnect: Boolean
}

input PokemonSetRelateToManyForUpdateInput {
  disconnect: [PokemonSetWhereUniqueInput!]
  set: [PokemonSetWhereUniqueInput!]
  create: [PokemonSetCreateInput!]
  connect: [PokemonSetWhereUniqueInput!]
}

input PokemonCardRelateToManyForUpdateInput {
  disconnect: [PokemonCardWhereUniqueInput!]
  set: [PokemonCardWhereUniqueInput!]
  create: [PokemonCardCreateInput!]
  connect: [PokemonCardWhereUniqueInput!]
}

input PokemonSetUpdateArgs {
  where: PokemonSetWhereUniqueInput!
  data: PokemonSetUpdateInput!
}

input PokemonSetCreateInput {
  name: String
  logoStorageUrl: String
  symbolStorageUrl: String
  parentSet: PokemonSetRelateToOneForCreateInput
  subsets: PokemonSetRelateToManyForCreateInput
  cards: PokemonCardRelateToManyForCreateInput
  isBoosterPack: Boolean
  tcgSetId: String
  language: String
  tcgSetId_language: String
  releaseDate: DateTime
  printedTotal: Int
  ptcgoCode: String
  series: String
  total: Int
  updatedAt: DateTime
  logoApiUrl: String
  symbolApiUrl: String
  lastPriceFetchDate: DateTime
}

input PokemonSetRelateToOneForCreateInput {
  create: PokemonSetCreateInput
  connect: PokemonSetWhereUniqueInput
}

input PokemonSetRelateToManyForCreateInput {
  create: [PokemonSetCreateInput!]
  connect: [PokemonSetWhereUniqueInput!]
}

input PokemonCardRelateToManyForCreateInput {
  create: [PokemonCardCreateInput!]
  connect: [PokemonCardWhereUniqueInput!]
}

type PokemonCard {
  id: ID!
  name: String
  displayName: String
  imageSmallStorageUrl: String
  imageLargeStorageUrl: String
  tcgCardId: String
  tcgSetId: String
  language: String
  tcgCardId_variant_language: String
  imageSmallApiUrl: String
  imageLargeApiUrl: String
  variant: String
  supertype: String
  subtypes: JSON
  hp: Int
  types: JSON
  evolvesFrom: String
  flavorText: String
  number: String
  normalizedNumber: Int
  artist: String
  rarity: String
  nationalPokedexNumbers: JSON
  retreatCost: JSON
  convertedRetreatCost: Int
  createdAt: DateTime
  updatedAt: DateTime
  abilities(where: PokemonCardAbilityWhereInput! = {}, orderBy: [PokemonCardAbilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardAbilityWhereUniqueInput): [PokemonCardAbility!]
  abilitiesCount(where: PokemonCardAbilityWhereInput! = {}): Int
  attacks(where: PokemonCardAttackWhereInput! = {}, orderBy: [PokemonCardAttackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardAttackWhereUniqueInput): [PokemonCardAttack!]
  attacksCount(where: PokemonCardAttackWhereInput! = {}): Int
  weaknesses(where: PokemonCardWeaknessWhereInput! = {}, orderBy: [PokemonCardWeaknessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardWeaknessWhereUniqueInput): [PokemonCardWeakness!]
  weaknessesCount(where: PokemonCardWeaknessWhereInput! = {}): Int
  set: PokemonSet
  priceHistories(where: PokemonCardPriceHistoryWhereInput! = {}, orderBy: [PokemonCardPriceHistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardPriceHistoryWhereUniqueInput): [PokemonCardPriceHistory!]
  priceHistoriesCount(where: PokemonCardPriceHistoryWhereInput! = {}): Int
}

input PokemonCardWhereUniqueInput {
  id: ID
  tcgCardId_variant_language: String
}

input PokemonCardWhereInput {
  AND: [PokemonCardWhereInput!]
  OR: [PokemonCardWhereInput!]
  NOT: [PokemonCardWhereInput!]
  id: IDFilter
  name: StringFilter
  imageSmallStorageUrl: StringFilter
  imageLargeStorageUrl: StringFilter
  tcgCardId: StringFilter
  tcgSetId: StringFilter
  language: StringFilter
  tcgCardId_variant_language: StringFilter
  imageSmallApiUrl: StringFilter
  imageLargeApiUrl: StringFilter
  variant: StringFilter
  supertype: StringFilter
  hp: IntNullableFilter
  evolvesFrom: StringFilter
  flavorText: StringFilter
  number: StringFilter
  normalizedNumber: IntNullableFilter
  artist: StringFilter
  rarity: StringFilter
  convertedRetreatCost: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  abilities: PokemonCardAbilityManyRelationFilter
  attacks: PokemonCardAttackManyRelationFilter
  weaknesses: PokemonCardWeaknessManyRelationFilter
  set: PokemonSetWhereInput
  priceHistories: PokemonCardPriceHistoryManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PokemonCardAbilityManyRelationFilter {
  every: PokemonCardAbilityWhereInput
  some: PokemonCardAbilityWhereInput
  none: PokemonCardAbilityWhereInput
}

input PokemonCardAttackManyRelationFilter {
  every: PokemonCardAttackWhereInput
  some: PokemonCardAttackWhereInput
  none: PokemonCardAttackWhereInput
}

input PokemonCardWeaknessManyRelationFilter {
  every: PokemonCardWeaknessWhereInput
  some: PokemonCardWeaknessWhereInput
  none: PokemonCardWeaknessWhereInput
}

input PokemonCardPriceHistoryManyRelationFilter {
  every: PokemonCardPriceHistoryWhereInput
  some: PokemonCardPriceHistoryWhereInput
  none: PokemonCardPriceHistoryWhereInput
}

input PokemonCardOrderByInput {
  id: OrderDirection
  name: OrderDirection
  imageSmallStorageUrl: OrderDirection
  imageLargeStorageUrl: OrderDirection
  tcgCardId: OrderDirection
  tcgSetId: OrderDirection
  language: OrderDirection
  tcgCardId_variant_language: OrderDirection
  imageSmallApiUrl: OrderDirection
  imageLargeApiUrl: OrderDirection
  variant: OrderDirection
  supertype: OrderDirection
  hp: OrderDirection
  evolvesFrom: OrderDirection
  flavorText: OrderDirection
  number: OrderDirection
  normalizedNumber: OrderDirection
  artist: OrderDirection
  rarity: OrderDirection
  convertedRetreatCost: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PokemonCardUpdateInput {
  name: String
  imageSmallStorageUrl: String
  imageLargeStorageUrl: String
  tcgCardId: String
  tcgSetId: String
  language: String
  tcgCardId_variant_language: String
  imageSmallApiUrl: String
  imageLargeApiUrl: String
  variant: String
  supertype: String
  subtypes: JSON
  hp: Int
  types: JSON
  evolvesFrom: String
  flavorText: String
  number: String
  normalizedNumber: Int
  artist: String
  rarity: String
  nationalPokedexNumbers: JSON
  retreatCost: JSON
  convertedRetreatCost: Int
  createdAt: DateTime
  updatedAt: DateTime
  abilities: PokemonCardAbilityRelateToManyForUpdateInput
  attacks: PokemonCardAttackRelateToManyForUpdateInput
  weaknesses: PokemonCardWeaknessRelateToManyForUpdateInput
  set: PokemonSetRelateToOneForUpdateInput
  priceHistories: PokemonCardPriceHistoryRelateToManyForUpdateInput
}

input PokemonCardAbilityRelateToManyForUpdateInput {
  disconnect: [PokemonCardAbilityWhereUniqueInput!]
  set: [PokemonCardAbilityWhereUniqueInput!]
  create: [PokemonCardAbilityCreateInput!]
  connect: [PokemonCardAbilityWhereUniqueInput!]
}

input PokemonCardAttackRelateToManyForUpdateInput {
  disconnect: [PokemonCardAttackWhereUniqueInput!]
  set: [PokemonCardAttackWhereUniqueInput!]
  create: [PokemonCardAttackCreateInput!]
  connect: [PokemonCardAttackWhereUniqueInput!]
}

input PokemonCardWeaknessRelateToManyForUpdateInput {
  disconnect: [PokemonCardWeaknessWhereUniqueInput!]
  set: [PokemonCardWeaknessWhereUniqueInput!]
  create: [PokemonCardWeaknessCreateInput!]
  connect: [PokemonCardWeaknessWhereUniqueInput!]
}

input PokemonCardPriceHistoryRelateToManyForUpdateInput {
  disconnect: [PokemonCardPriceHistoryWhereUniqueInput!]
  set: [PokemonCardPriceHistoryWhereUniqueInput!]
  create: [PokemonCardPriceHistoryCreateInput!]
  connect: [PokemonCardPriceHistoryWhereUniqueInput!]
}

input PokemonCardUpdateArgs {
  where: PokemonCardWhereUniqueInput!
  data: PokemonCardUpdateInput!
}

input PokemonCardCreateInput {
  name: String
  imageSmallStorageUrl: String
  imageLargeStorageUrl: String
  tcgCardId: String
  tcgSetId: String
  language: String
  tcgCardId_variant_language: String
  imageSmallApiUrl: String
  imageLargeApiUrl: String
  variant: String
  supertype: String
  subtypes: JSON
  hp: Int
  types: JSON
  evolvesFrom: String
  flavorText: String
  number: String
  normalizedNumber: Int
  artist: String
  rarity: String
  nationalPokedexNumbers: JSON
  retreatCost: JSON
  convertedRetreatCost: Int
  createdAt: DateTime
  updatedAt: DateTime
  abilities: PokemonCardAbilityRelateToManyForCreateInput
  attacks: PokemonCardAttackRelateToManyForCreateInput
  weaknesses: PokemonCardWeaknessRelateToManyForCreateInput
  set: PokemonSetRelateToOneForCreateInput
  priceHistories: PokemonCardPriceHistoryRelateToManyForCreateInput
}

input PokemonCardAbilityRelateToManyForCreateInput {
  create: [PokemonCardAbilityCreateInput!]
  connect: [PokemonCardAbilityWhereUniqueInput!]
}

input PokemonCardAttackRelateToManyForCreateInput {
  create: [PokemonCardAttackCreateInput!]
  connect: [PokemonCardAttackWhereUniqueInput!]
}

input PokemonCardWeaknessRelateToManyForCreateInput {
  create: [PokemonCardWeaknessCreateInput!]
  connect: [PokemonCardWeaknessWhereUniqueInput!]
}

input PokemonCardPriceHistoryRelateToManyForCreateInput {
  create: [PokemonCardPriceHistoryCreateInput!]
  connect: [PokemonCardPriceHistoryWhereUniqueInput!]
}

type PokemonCardPriceHistory {
  id: ID!
  card: PokemonCard
  variant: String
  tcgplayerData: JSON
  cardmarketData: JSON
  fetchedAt: DateTime
  priceDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PokemonCardPriceHistoryWhereUniqueInput {
  id: ID
}

input PokemonCardPriceHistoryWhereInput {
  AND: [PokemonCardPriceHistoryWhereInput!]
  OR: [PokemonCardPriceHistoryWhereInput!]
  NOT: [PokemonCardPriceHistoryWhereInput!]
  id: IDFilter
  card: PokemonCardWhereInput
  variant: StringFilter
  fetchedAt: DateTimeNullableFilter
  priceDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PokemonCardPriceHistoryOrderByInput {
  id: OrderDirection
  variant: OrderDirection
  fetchedAt: OrderDirection
  priceDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PokemonCardPriceHistoryUpdateInput {
  card: PokemonCardRelateToOneForUpdateInput
  variant: String
  tcgplayerData: JSON
  cardmarketData: JSON
  fetchedAt: DateTime
  priceDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PokemonCardRelateToOneForUpdateInput {
  create: PokemonCardCreateInput
  connect: PokemonCardWhereUniqueInput
  disconnect: Boolean
}

input PokemonCardPriceHistoryUpdateArgs {
  where: PokemonCardPriceHistoryWhereUniqueInput!
  data: PokemonCardPriceHistoryUpdateInput!
}

input PokemonCardPriceHistoryCreateInput {
  card: PokemonCardRelateToOneForCreateInput
  variant: String
  tcgplayerData: JSON
  cardmarketData: JSON
  fetchedAt: DateTime
  priceDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input PokemonCardRelateToOneForCreateInput {
  create: PokemonCardCreateInput
  connect: PokemonCardWhereUniqueInput
}

type PokemonCardAbility {
  id: ID!
  name: String
  text: String
  type: String
  card: PokemonCard
}

input PokemonCardAbilityWhereUniqueInput {
  id: ID
}

input PokemonCardAbilityWhereInput {
  AND: [PokemonCardAbilityWhereInput!]
  OR: [PokemonCardAbilityWhereInput!]
  NOT: [PokemonCardAbilityWhereInput!]
  id: IDFilter
  name: StringFilter
  text: StringFilter
  type: StringFilter
  card: PokemonCardWhereInput
}

input PokemonCardAbilityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  text: OrderDirection
  type: OrderDirection
}

input PokemonCardAbilityUpdateInput {
  name: String
  text: String
  type: String
  card: PokemonCardRelateToOneForUpdateInput
}

input PokemonCardAbilityUpdateArgs {
  where: PokemonCardAbilityWhereUniqueInput!
  data: PokemonCardAbilityUpdateInput!
}

input PokemonCardAbilityCreateInput {
  name: String
  text: String
  type: String
  card: PokemonCardRelateToOneForCreateInput
}

type PokemonCardAttack {
  id: ID!
  name: String
  cost: JSON
  convertedEnergyCost: Int
  damage: String
  text: String
  card: PokemonCard
}

input PokemonCardAttackWhereUniqueInput {
  id: ID
}

input PokemonCardAttackWhereInput {
  AND: [PokemonCardAttackWhereInput!]
  OR: [PokemonCardAttackWhereInput!]
  NOT: [PokemonCardAttackWhereInput!]
  id: IDFilter
  name: StringFilter
  convertedEnergyCost: IntFilter
  damage: StringFilter
  text: StringFilter
  card: PokemonCardWhereInput
}

input PokemonCardAttackOrderByInput {
  id: OrderDirection
  name: OrderDirection
  convertedEnergyCost: OrderDirection
  damage: OrderDirection
  text: OrderDirection
}

input PokemonCardAttackUpdateInput {
  name: String
  cost: JSON
  convertedEnergyCost: Int
  damage: String
  text: String
  card: PokemonCardRelateToOneForUpdateInput
}

input PokemonCardAttackUpdateArgs {
  where: PokemonCardAttackWhereUniqueInput!
  data: PokemonCardAttackUpdateInput!
}

input PokemonCardAttackCreateInput {
  name: String
  cost: JSON
  convertedEnergyCost: Int
  damage: String
  text: String
  card: PokemonCardRelateToOneForCreateInput
}

type PokemonCardWeakness {
  id: ID!
  type: String
  value: String
  card: PokemonCard
}

input PokemonCardWeaknessWhereUniqueInput {
  id: ID
}

input PokemonCardWeaknessWhereInput {
  AND: [PokemonCardWeaknessWhereInput!]
  OR: [PokemonCardWeaknessWhereInput!]
  NOT: [PokemonCardWeaknessWhereInput!]
  id: IDFilter
  type: StringFilter
  value: StringFilter
  card: PokemonCardWhereInput
}

input PokemonCardWeaknessOrderByInput {
  id: OrderDirection
  type: OrderDirection
  value: OrderDirection
}

input PokemonCardWeaknessUpdateInput {
  type: String
  value: String
  card: PokemonCardRelateToOneForUpdateInput
}

input PokemonCardWeaknessUpdateArgs {
  where: PokemonCardWeaknessWhereUniqueInput!
  data: PokemonCardWeaknessUpdateInput!
}

input PokemonCardWeaknessCreateInput {
  type: String
  value: String
  card: PokemonCardRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  emailVerified: DateTime
  image: String
  createdAt: DateTime
  updatedAt: DateTime
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  authenticators(where: AuthenticatorWhereInput! = {}, orderBy: [AuthenticatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticatorWhereUniqueInput): [Authenticator!]
  authenticatorsCount(where: AuthenticatorWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  image: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  accounts: AccountManyRelationFilter
  authenticators: AuthenticatorManyRelationFilter
  sessions: SessionManyRelationFilter
}

input AccountManyRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input AuthenticatorManyRelationFilter {
  every: AuthenticatorWhereInput
  some: AuthenticatorWhereInput
  none: AuthenticatorWhereInput
}

input SessionManyRelationFilter {
  every: SessionWhereInput
  some: SessionWhereInput
  none: SessionWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  emailVerified: OrderDirection
  image: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  emailVerified: DateTime
  image: String
  createdAt: DateTime
  updatedAt: DateTime
  accounts: AccountRelateToManyForUpdateInput
  authenticators: AuthenticatorRelateToManyForUpdateInput
  sessions: SessionRelateToManyForUpdateInput
}

input AccountRelateToManyForUpdateInput {
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input AuthenticatorRelateToManyForUpdateInput {
  disconnect: [AuthenticatorWhereUniqueInput!]
  set: [AuthenticatorWhereUniqueInput!]
  create: [AuthenticatorCreateInput!]
  connect: [AuthenticatorWhereUniqueInput!]
}

input SessionRelateToManyForUpdateInput {
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  emailVerified: DateTime
  image: String
  createdAt: DateTime
  updatedAt: DateTime
  accounts: AccountRelateToManyForCreateInput
  authenticators: AuthenticatorRelateToManyForCreateInput
  sessions: SessionRelateToManyForCreateInput
}

input AccountRelateToManyForCreateInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input AuthenticatorRelateToManyForCreateInput {
  create: [AuthenticatorCreateInput!]
  connect: [AuthenticatorWhereUniqueInput!]
}

input SessionRelateToManyForCreateInput {
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

type Account {
  id: ID!
  user: User
  type: String
  provider: String
  providerAccountId: String
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  user: UserWhereInput
  type: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refreshToken: StringFilter
  accessToken: StringFilter
  expiresAt: IntNullableFilter
  tokenType: StringFilter
  scope: StringFilter
  idToken: StringFilter
  sessionState: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AccountOrderByInput {
  id: OrderDirection
  type: OrderDirection
  provider: OrderDirection
  providerAccountId: OrderDirection
  refreshToken: OrderDirection
  accessToken: OrderDirection
  expiresAt: OrderDirection
  tokenType: OrderDirection
  scope: OrderDirection
  idToken: OrderDirection
  sessionState: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AccountUpdateInput {
  user: UserRelateToOneForUpdateInput
  type: String
  provider: String
  providerAccountId: String
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  user: UserRelateToOneForCreateInput
  type: String
  provider: String
  providerAccountId: String
  refreshToken: String
  accessToken: String
  expiresAt: Int
  tokenType: String
  scope: String
  idToken: String
  sessionState: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Session {
  id: ID!
  sessionToken: String
  user: User
  expires: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input SessionWhereUniqueInput {
  id: ID
  sessionToken: String
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  sessionToken: StringFilter
  user: UserWhereInput
  expires: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SessionOrderByInput {
  id: OrderDirection
  sessionToken: OrderDirection
  expires: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SessionUpdateInput {
  sessionToken: String
  user: UserRelateToOneForUpdateInput
  expires: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  sessionToken: String
  user: UserRelateToOneForCreateInput
  expires: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type VerificationToken {
  id: ID!
  identifier: String
  token: String
  expires: DateTime
}

input VerificationTokenWhereUniqueInput {
  id: ID
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  id: IDFilter
  identifier: StringFilter
  token: StringFilter
  expires: DateTimeNullableFilter
}

input VerificationTokenOrderByInput {
  id: OrderDirection
  identifier: OrderDirection
  token: OrderDirection
  expires: OrderDirection
}

input VerificationTokenUpdateInput {
  identifier: String
  token: String
  expires: DateTime
}

input VerificationTokenUpdateArgs {
  where: VerificationTokenWhereUniqueInput!
  data: VerificationTokenUpdateInput!
}

input VerificationTokenCreateInput {
  identifier: String
  token: String
  expires: DateTime
}

type Authenticator {
  id: ID!
  credentialID: String
  user: User
  providerAccountId: String
  credentialPublicKey: String
  counter: Int
  credentialDeviceType: String
  credentialBackedUp: Boolean
  transports: JSON
}

input AuthenticatorWhereUniqueInput {
  id: ID
  credentialID: String
}

input AuthenticatorWhereInput {
  AND: [AuthenticatorWhereInput!]
  OR: [AuthenticatorWhereInput!]
  NOT: [AuthenticatorWhereInput!]
  id: IDFilter
  credentialID: StringFilter
  user: UserWhereInput
  providerAccountId: StringFilter
  credentialPublicKey: StringFilter
  counter: IntNullableFilter
  credentialDeviceType: StringFilter
  credentialBackedUp: BooleanFilter
}

input AuthenticatorOrderByInput {
  id: OrderDirection
  credentialID: OrderDirection
  providerAccountId: OrderDirection
  credentialPublicKey: OrderDirection
  counter: OrderDirection
  credentialDeviceType: OrderDirection
  credentialBackedUp: OrderDirection
}

input AuthenticatorUpdateInput {
  credentialID: String
  user: UserRelateToOneForUpdateInput
  providerAccountId: String
  credentialPublicKey: String
  counter: Int
  credentialDeviceType: String
  credentialBackedUp: Boolean
  transports: JSON
}

input AuthenticatorUpdateArgs {
  where: AuthenticatorWhereUniqueInput!
  data: AuthenticatorUpdateInput!
}

input AuthenticatorCreateInput {
  credentialID: String
  user: UserRelateToOneForCreateInput
  providerAccountId: String
  credentialPublicKey: String
  counter: Int
  credentialDeviceType: String
  credentialBackedUp: Boolean
  transports: JSON
}

type CmsUser {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: CmsRole
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input CmsUserWhereUniqueInput {
  id: ID
  email: String
}

input CmsUserWhereInput {
  AND: [CmsUserWhereInput!]
  OR: [CmsUserWhereInput!]
  NOT: [CmsUserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: CmsRoleWhereInput
  createdAt: DateTimeNullableFilter
}

input CmsUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input CmsUserUpdateInput {
  name: String
  email: String
  password: String
  role: CmsRoleRelateToOneForUpdateInput
  createdAt: DateTime
}

input CmsRoleRelateToOneForUpdateInput {
  create: CmsRoleCreateInput
  connect: CmsRoleWhereUniqueInput
  disconnect: Boolean
}

input CmsUserUpdateArgs {
  where: CmsUserWhereUniqueInput!
  data: CmsUserUpdateInput!
}

input CmsUserCreateInput {
  name: String
  email: String
  password: String
  role: CmsRoleRelateToOneForCreateInput
  createdAt: DateTime
}

input CmsRoleRelateToOneForCreateInput {
  create: CmsRoleCreateInput
  connect: CmsRoleWhereUniqueInput
}

type CmsRole {
  id: ID!
  label: String
  value: String
}

input CmsRoleWhereUniqueInput {
  id: ID
  value: String
}

input CmsRoleWhereInput {
  AND: [CmsRoleWhereInput!]
  OR: [CmsRoleWhereInput!]
  NOT: [CmsRoleWhereInput!]
  id: IDFilter
  label: StringFilter
  value: StringFilter
}

input CmsRoleOrderByInput {
  id: OrderDirection
  label: OrderDirection
  value: OrderDirection
}

input CmsRoleUpdateInput {
  label: String
  value: String
}

input CmsRoleUpdateArgs {
  where: CmsRoleWhereUniqueInput!
  data: CmsRoleUpdateInput!
}

input CmsRoleCreateInput {
  label: String
  value: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPokemonSet(data: PokemonSetCreateInput!): PokemonSet
  createPokemonSets(data: [PokemonSetCreateInput!]!): [PokemonSet]
  updatePokemonSet(where: PokemonSetWhereUniqueInput!, data: PokemonSetUpdateInput!): PokemonSet
  updatePokemonSets(data: [PokemonSetUpdateArgs!]!): [PokemonSet]
  deletePokemonSet(where: PokemonSetWhereUniqueInput!): PokemonSet
  deletePokemonSets(where: [PokemonSetWhereUniqueInput!]!): [PokemonSet]
  createPokemonCard(data: PokemonCardCreateInput!): PokemonCard
  createPokemonCards(data: [PokemonCardCreateInput!]!): [PokemonCard]
  updatePokemonCard(where: PokemonCardWhereUniqueInput!, data: PokemonCardUpdateInput!): PokemonCard
  updatePokemonCards(data: [PokemonCardUpdateArgs!]!): [PokemonCard]
  deletePokemonCard(where: PokemonCardWhereUniqueInput!): PokemonCard
  deletePokemonCards(where: [PokemonCardWhereUniqueInput!]!): [PokemonCard]
  createPokemonCardPriceHistory(data: PokemonCardPriceHistoryCreateInput!): PokemonCardPriceHistory
  createPokemonCardPriceHistories(data: [PokemonCardPriceHistoryCreateInput!]!): [PokemonCardPriceHistory]
  updatePokemonCardPriceHistory(where: PokemonCardPriceHistoryWhereUniqueInput!, data: PokemonCardPriceHistoryUpdateInput!): PokemonCardPriceHistory
  updatePokemonCardPriceHistories(data: [PokemonCardPriceHistoryUpdateArgs!]!): [PokemonCardPriceHistory]
  deletePokemonCardPriceHistory(where: PokemonCardPriceHistoryWhereUniqueInput!): PokemonCardPriceHistory
  deletePokemonCardPriceHistories(where: [PokemonCardPriceHistoryWhereUniqueInput!]!): [PokemonCardPriceHistory]
  createPokemonCardAbility(data: PokemonCardAbilityCreateInput!): PokemonCardAbility
  createPokemonCardAbilities(data: [PokemonCardAbilityCreateInput!]!): [PokemonCardAbility]
  updatePokemonCardAbility(where: PokemonCardAbilityWhereUniqueInput!, data: PokemonCardAbilityUpdateInput!): PokemonCardAbility
  updatePokemonCardAbilities(data: [PokemonCardAbilityUpdateArgs!]!): [PokemonCardAbility]
  deletePokemonCardAbility(where: PokemonCardAbilityWhereUniqueInput!): PokemonCardAbility
  deletePokemonCardAbilities(where: [PokemonCardAbilityWhereUniqueInput!]!): [PokemonCardAbility]
  createPokemonCardAttack(data: PokemonCardAttackCreateInput!): PokemonCardAttack
  createPokemonCardAttacks(data: [PokemonCardAttackCreateInput!]!): [PokemonCardAttack]
  updatePokemonCardAttack(where: PokemonCardAttackWhereUniqueInput!, data: PokemonCardAttackUpdateInput!): PokemonCardAttack
  updatePokemonCardAttacks(data: [PokemonCardAttackUpdateArgs!]!): [PokemonCardAttack]
  deletePokemonCardAttack(where: PokemonCardAttackWhereUniqueInput!): PokemonCardAttack
  deletePokemonCardAttacks(where: [PokemonCardAttackWhereUniqueInput!]!): [PokemonCardAttack]
  createPokemonCardWeakness(data: PokemonCardWeaknessCreateInput!): PokemonCardWeakness
  createPokemonCardWeaknesses(data: [PokemonCardWeaknessCreateInput!]!): [PokemonCardWeakness]
  updatePokemonCardWeakness(where: PokemonCardWeaknessWhereUniqueInput!, data: PokemonCardWeaknessUpdateInput!): PokemonCardWeakness
  updatePokemonCardWeaknesses(data: [PokemonCardWeaknessUpdateArgs!]!): [PokemonCardWeakness]
  deletePokemonCardWeakness(where: PokemonCardWeaknessWhereUniqueInput!): PokemonCardWeakness
  deletePokemonCardWeaknesses(where: [PokemonCardWeaknessWhereUniqueInput!]!): [PokemonCardWeakness]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(where: SessionWhereUniqueInput!, data: SessionUpdateInput!): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createVerificationToken(data: VerificationTokenCreateInput!): VerificationToken
  createVerificationTokens(data: [VerificationTokenCreateInput!]!): [VerificationToken]
  updateVerificationToken(where: VerificationTokenWhereUniqueInput!, data: VerificationTokenUpdateInput!): VerificationToken
  updateVerificationTokens(data: [VerificationTokenUpdateArgs!]!): [VerificationToken]
  deleteVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  deleteVerificationTokens(where: [VerificationTokenWhereUniqueInput!]!): [VerificationToken]
  createAuthenticator(data: AuthenticatorCreateInput!): Authenticator
  createAuthenticators(data: [AuthenticatorCreateInput!]!): [Authenticator]
  updateAuthenticator(where: AuthenticatorWhereUniqueInput!, data: AuthenticatorUpdateInput!): Authenticator
  updateAuthenticators(data: [AuthenticatorUpdateArgs!]!): [Authenticator]
  deleteAuthenticator(where: AuthenticatorWhereUniqueInput!): Authenticator
  deleteAuthenticators(where: [AuthenticatorWhereUniqueInput!]!): [Authenticator]
  createCmsUser(data: CmsUserCreateInput!): CmsUser
  createCmsUsers(data: [CmsUserCreateInput!]!): [CmsUser]
  updateCmsUser(where: CmsUserWhereUniqueInput!, data: CmsUserUpdateInput!): CmsUser
  updateCmsUsers(data: [CmsUserUpdateArgs!]!): [CmsUser]
  deleteCmsUser(where: CmsUserWhereUniqueInput!): CmsUser
  deleteCmsUsers(where: [CmsUserWhereUniqueInput!]!): [CmsUser]
  createCmsRole(data: CmsRoleCreateInput!): CmsRole
  createCmsRoles(data: [CmsRoleCreateInput!]!): [CmsRole]
  updateCmsRole(where: CmsRoleWhereUniqueInput!, data: CmsRoleUpdateInput!): CmsRole
  updateCmsRoles(data: [CmsRoleUpdateArgs!]!): [CmsRole]
  deleteCmsRole(where: CmsRoleWhereUniqueInput!): CmsRole
  deleteCmsRoles(where: [CmsRoleWhereUniqueInput!]!): [CmsRole]
  endSession: Boolean!
  authenticateCmsUserWithPassword(email: String!, password: String!): CmsUserAuthenticationWithPasswordResult
}

union CmsUserAuthenticationWithPasswordResult = CmsUserAuthenticationWithPasswordSuccess | CmsUserAuthenticationWithPasswordFailure

type CmsUserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: CmsUser!
}

type CmsUserAuthenticationWithPasswordFailure {
  message: String!
}

type Query {
  pokemonSet(where: PokemonSetWhereUniqueInput!): PokemonSet
  pokemonSets(where: PokemonSetWhereInput! = {}, orderBy: [PokemonSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonSetWhereUniqueInput): [PokemonSet!]
  pokemonSetsCount(where: PokemonSetWhereInput! = {}): Int
  pokemonCard(where: PokemonCardWhereUniqueInput!): PokemonCard
  pokemonCards(where: PokemonCardWhereInput! = {}, orderBy: [PokemonCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardWhereUniqueInput): [PokemonCard!]
  pokemonCardsCount(where: PokemonCardWhereInput! = {}): Int
  pokemonCardPriceHistory(where: PokemonCardPriceHistoryWhereUniqueInput!): PokemonCardPriceHistory
  pokemonCardPriceHistories(where: PokemonCardPriceHistoryWhereInput! = {}, orderBy: [PokemonCardPriceHistoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardPriceHistoryWhereUniqueInput): [PokemonCardPriceHistory!]
  pokemonCardPriceHistoriesCount(where: PokemonCardPriceHistoryWhereInput! = {}): Int
  pokemonCardAbility(where: PokemonCardAbilityWhereUniqueInput!): PokemonCardAbility
  pokemonCardAbilities(where: PokemonCardAbilityWhereInput! = {}, orderBy: [PokemonCardAbilityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardAbilityWhereUniqueInput): [PokemonCardAbility!]
  pokemonCardAbilitiesCount(where: PokemonCardAbilityWhereInput! = {}): Int
  pokemonCardAttack(where: PokemonCardAttackWhereUniqueInput!): PokemonCardAttack
  pokemonCardAttacks(where: PokemonCardAttackWhereInput! = {}, orderBy: [PokemonCardAttackOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardAttackWhereUniqueInput): [PokemonCardAttack!]
  pokemonCardAttacksCount(where: PokemonCardAttackWhereInput! = {}): Int
  pokemonCardWeakness(where: PokemonCardWeaknessWhereUniqueInput!): PokemonCardWeakness
  pokemonCardWeaknesses(where: PokemonCardWeaknessWhereInput! = {}, orderBy: [PokemonCardWeaknessOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PokemonCardWeaknessWhereUniqueInput): [PokemonCardWeakness!]
  pokemonCardWeaknessesCount(where: PokemonCardWeaknessWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(where: VerificationTokenWhereInput! = {}, orderBy: [VerificationTokenOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VerificationTokenWhereUniqueInput): [VerificationToken!]
  verificationTokensCount(where: VerificationTokenWhereInput! = {}): Int
  authenticator(where: AuthenticatorWhereUniqueInput!): Authenticator
  authenticators(where: AuthenticatorWhereInput! = {}, orderBy: [AuthenticatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthenticatorWhereUniqueInput): [Authenticator!]
  authenticatorsCount(where: AuthenticatorWhereInput! = {}): Int
  cmsUser(where: CmsUserWhereUniqueInput!): CmsUser
  cmsUsers(where: CmsUserWhereInput! = {}, orderBy: [CmsUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CmsUserWhereUniqueInput): [CmsUser!]
  cmsUsersCount(where: CmsUserWhereInput! = {}): Int
  cmsRole(where: CmsRoleWhereUniqueInput!): CmsRole
  cmsRoles(where: CmsRoleWhereInput! = {}, orderBy: [CmsRoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CmsRoleWhereUniqueInput): [CmsRole!]
  cmsRolesCount(where: CmsRoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = CmsUser

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
