// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model PokemonSet {
  id                 String        @id @default(cuid())
  name               String        @default("")
  logoStorageUrl     String        @default("")
  symbolStorageUrl   String        @default("")
  parentSet          PokemonSet?   @relation("PokemonSet_parentSet", fields: [parentSetId], references: [id])
  parentSetId        String?       @map("parentSet")
  subsets            PokemonSet[]  @relation("PokemonSet_parentSet")
  cards              PokemonCard[] @relation("PokemonCard_set")
  isBoosterPack      Boolean       @default(true)
  tcgSetId           String        @default("")
  language           String        @default("")
  tcgSetId_language  String        @unique @default("")
  releaseDate        DateTime
  printedTotal       Int
  ptcgoCode          String?
  series             String        @default("")
  total              Int
  updatedAt          DateTime?     @updatedAt
  logoApiUrl         String        @default("")
  symbolApiUrl       String        @default("")
  lastPriceFetchDate DateTime?

  @@index([parentSetId])
}

model PokemonCard {
  id                         String                    @id @default(cuid())
  name                       String                    @default("")
  imageSmallStorageUrl       String                    @default("")
  imageLargeStorageUrl       String                    @default("")
  tcgCardId                  String                    @default("")
  tcgSetId                   String                    @default("")
  language                   String                    @default("")
  tcgCardId_variant_language String                    @unique @default("")
  imageSmallApiUrl           String                    @default("")
  imageLargeApiUrl           String                    @default("")
  variant                    String                    @default("normal")
  supertype                  String                    @default("")
  subtypes                   Json?
  hp                         Int?
  types                      Json?
  evolvesFrom                String                    @default("")
  flavorText                 String                    @default("")
  number                     String                    @default("")
  normalizedNumber           Int?                      @default(999)
  artist                     String                    @default("")
  rarity                     String                    @default("")
  nationalPokedexNumbers     Json?
  retreatCost                Json?
  convertedRetreatCost       Int?
  createdAt                  DateTime?                 @default(now())
  updatedAt                  DateTime?                 @updatedAt
  abilities                  PokemonCardAbility[]      @relation("PokemonCardAbility_card")
  attacks                    PokemonCardAttack[]       @relation("PokemonCardAttack_card")
  weaknesses                 PokemonCardWeakness[]     @relation("PokemonCardWeakness_card")
  set                        PokemonSet?               @relation("PokemonCard_set", fields: [setId], references: [id])
  setId                      String?                   @map("set")
  priceHistories             PokemonCardPriceHistory[] @relation("PokemonCardPriceHistory_card")

  @@index([setId])
}

model PokemonCardPriceHistory {
  id             String       @id @default(cuid())
  card           PokemonCard? @relation("PokemonCardPriceHistory_card", fields: [cardId], references: [id])
  cardId         String?      @map("card")
  variant        String       @default("")
  tcgplayerData  Json?
  cardmarketData Json?
  fetchedAt      DateTime?    @default(now())
  priceDate      DateTime?    @default(now())
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt

  @@index([cardId])
}

model PokemonCardAbility {
  id     String       @id @default(cuid())
  name   String       @default("")
  text   String       @default("")
  type   String       @default("")
  card   PokemonCard? @relation("PokemonCardAbility_card", fields: [cardId], references: [id])
  cardId String?      @map("card")

  @@index([cardId])
}

model PokemonCardAttack {
  id                  String       @id @default(cuid())
  name                String       @default("")
  cost                Json?
  convertedEnergyCost Int
  damage              String       @default("")
  text                String       @default("")
  card                PokemonCard? @relation("PokemonCardAttack_card", fields: [cardId], references: [id])
  cardId              String?      @map("card")

  @@index([cardId])
}

model PokemonCardWeakness {
  id     String       @id @default(cuid())
  type   String       @default("")
  value  String       @default("")
  card   PokemonCard? @relation("PokemonCardWeakness_card", fields: [cardId], references: [id])
  cardId String?      @map("card")

  @@index([cardId])
}

model User {
  id             String          @id @default(cuid())
  name           String          @default("")
  username       String          @unique @default("")
  email          String          @unique @default("")
  emailVerified  DateTime?
  image          String          @default("")
  lastLoginAt    DateTime?
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  access         UserAccessType? @default(freemium)
  active         Boolean         @default(true)
  accounts       Account[]       @relation("Account_user")
  authenticators Authenticator[] @relation("Authenticator_user")
  sessions       Session[]       @relation("Session_user")
}

model Account {
  id                String    @id @default(cuid())
  user              User?     @relation("Account_user", fields: [userId], references: [id])
  userId            String?   @map("user")
  type              String    @default("")
  provider          String    @default("")
  providerAccountId String    @default("")
  refreshToken      String    @default("")
  accessToken       String    @default("")
  expiresAt         Int?
  tokenType         String    @default("")
  scope             String    @default("")
  idToken           String    @default("")
  sessionState      String    @default("")
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @updatedAt

  @@index([userId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique @default("")
  user         User?     @relation("Session_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  expires      DateTime?
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String    @default("")
  token      String    @default("")
  expires    DateTime?
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique @default("")
  user                 User?   @relation("Authenticator_user", fields: [userId], references: [id])
  userId               String? @map("user")
  providerAccountId    String  @default("")
  credentialPublicKey  String  @default("")
  counter              Int?
  credentialDeviceType String  @default("")
  credentialBackedUp   Boolean @default(false)
  transports           Json?

  @@index([userId])
}

model CmsUser {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  role      CmsRole?  @relation("CmsUser_role", fields: [roleId], references: [id])
  roleId    String?   @map("role")
  createdAt DateTime? @default(now())

  @@index([roleId])
}

model CmsRole {
  id                String    @id @default(cuid())
  label             String    @default("")
  value             String    @unique @default("")
  from_CmsUser_role CmsUser[] @relation("CmsUser_role")
}

enum UserAccessType {
  freemium
  premium
}
